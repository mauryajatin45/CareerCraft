<%- layout('layouts/boilerplate') %>

<head>
  <title>Skill Assessment | CareerCraft</title>
  <meta charset="UTF-8">
  <title>Skill Assessment UI</title>
  <style>
    :root {
      --primary: #4361ee;
      --primary-light: #4895ef;
      --secondary: #3f37c9;
      --accent: #7209b7;
      --light: #f8f9fa;
      --dark: #2b2d42;
    }
    
    .assessment-container {
      max-width: 800px;
      margin: 2rem auto;
    }
    
    .assessment-card {
      border-radius: 16px;
      box-shadow: 0 10px 30px rgba(0,0,0,0.08);
      border: none;
      overflow: hidden;
    }
    
    .assessment-header {
      background: linear-gradient(135deg, var(--primary), var(--secondary));
      color: white;
      padding: 1.5rem;
      text-align: center;
    }
    
    .assessment-body {
      padding: 2rem;
      background: white;
    }
    
    .form-label {
      font-weight: 600;
      color: var(--dark);
      margin-bottom: 0.5rem;
    }
    
    .form-control, .form-select {
      border-radius: 8px;
      padding: 0.75rem 1rem;
      border: 1px solid #e0e0e0;
      transition: all 0.3s ease;
    }
    
    .form-control:focus, .form-select:focus {
      border-color: var(--primary-light);
      box-shadow: 0 0 0 0.25rem rgba(67, 97, 238, 0.15);
    }
    
    .suggestions {
      border: 1px solid #e0e0e0;
      max-height: 200px;
      overflow-y: auto;
      position: absolute;
      background-color: white;
      z-index: 1000;
      width: 100%;
      border-radius: 0 0 8px 8px;
      box-shadow: 0 5px 15px rgba(0,0,0,0.1);
      display: none;
    }
    
    .suggestion-item {
      padding: 0.75rem 1rem;
      cursor: pointer;
      transition: all 0.2s ease;
      border-bottom: 1px solid #f0f0f0;
    }
    
    .suggestion-item:hover {
      background-color: #f8f9fa;
      color: var(--primary);
    }
    
    .autocomplete-wrapper {
      position: relative;
    }
    
    .question-box {
      background-color: white;
      border-radius: 12px;
      padding: 1.5rem;
      box-shadow: 0 5px 15px rgba(0,0,0,0.05);
      margin-top: 1.5rem;
    }
    
    .btn-primary {
      background-color: var(--primary);
      border: none;
      padding: 0.75rem 1.5rem;
      font-weight: 600;
      border-radius: 8px;
      transition: all 0.3s ease;
    }
    
    .btn-primary:hover {
      background-color: var(--secondary);
      transform: translateY(-2px);
      box-shadow: 0 5px 15px rgba(67, 97, 238, 0.3);
    }
    
    .form-check {
      margin-bottom: 0.75rem;
    }
    
    .form-check-input {
      width: 1.1em;
      height: 1.1em;
      margin-top: 0.2em;
    }
    
    .form-check-label {
      margin-left: 0.5rem;
      cursor: pointer;
    }
    
    .navigation-buttons {
      display: flex;
      justify-content: space-between;
      margin-top: 1.5rem;
    }
    
    @media (max-width: 768px) {
      .assessment-container {
        padding: 0 1rem;
      }
      
      .assessment-body {
        padding: 1.5rem;
      }
    }
  </style>
</head>

<body>
  <!-- Main Assessment Container -->
  <div class="assessment-container">
    <!-- Assessment Card -->
    <div class="assessment-card">
      <!-- Header -->
      <div class="assessment-header">
        <h3>Skill Assessment</h3>
        <p class="mb-0">Let's evaluate your technical and soft skills</p>
      </div>
      
      <!-- Body -->
      <div class="assessment-body">
        <form id="skillAssessmentForm">
          <!-- Programming Languages Autocomplete -->
          <div class="mb-4 autocomplete-wrapper">
            <label for="languageInput" class="form-label">Programming Languages</label>
            <input type="text" class="form-control" id="languageInput" placeholder="e.g. Python, JavaScript, Java">
            <div id="languageSuggestions" class="suggestions"></div>
          </div>

          <!-- Tools / Software Autocomplete -->
          <div class="mb-4 autocomplete-wrapper">
            <label for="toolsInput" class="form-label">Tools / Software</label>
            <input type="text" class="form-control" id="toolsInput" placeholder="e.g. Git, VS Code, Docker">
            <div id="toolsSuggestions" class="suggestions"></div>
          </div>

          <!-- Soft Skills Dropdown -->
          <div class="mb-4">
            <label for="softSkillsSelect" class="form-label">Soft Skills</label>
            <select class="form-select" id="softSkillsSelect">
              <option selected disabled>Select a soft skill...</option>
              <option value="communication">Communication</option>
              <option value="teamwork">Teamwork</option>
              <option value="problem-solving">Problem-solving</option>
              <option value="adaptability">Adaptability</option>
              <option value="leadership">Leadership</option>
            </select>
          </div>

          <!-- Proceed Button -->
          <div class="text-center">
            <button type="button" class="btn btn-primary" id="proceedButton">Proceed</button>
          </div>
        </form>
        
        <!-- MCQ Questions Section -->
        <div id="questionsSection" style="display:none; margin-top: 20px;">
          <div class="question-box">
            <div id="questionContent"></div>
            <div id="optionsContainer"></div>
            <div id="navigationButtons" class="navigation-buttons"></div>
          </div>
        </div>
      </div>
    </div>
  </div>


  <script>
    // Example suggestion arrays â€“ replace these with your own
    const languageOptions = ["Python", "JavaScript", "Java", "C", "C++", "C#", "Go", "Rust", "Ruby", "PHP"];
    const toolOptions = ["Git", "GitHub", "VS Code", "Docker", "Jenkins", "Figma", "Slack", "Postman"];
  
    // Set up autocomplete behavior
    function setupAutocomplete(inputId, suggestionBoxId, options) {
      const input = document.getElementById(inputId);
      const suggestionBox = document.getElementById(suggestionBoxId);
  
      input.addEventListener("input", () => {
        const value = input.value;
        const terms = value.split(/,\s*/);
        const lastTerm = terms[terms.length - 1].toLowerCase();
  
        // Clear suggestions
        suggestionBox.innerHTML = "";
  
        if (!lastTerm) return;
  
        const filtered = options.filter(option =>
          option.toLowerCase().startsWith(lastTerm)
        );
  
        filtered.forEach(item => {
          const div = document.createElement("div");
          div.className = "suggestion-item";
          div.textContent = item;
          div.onclick = () => {
            terms[terms.length - 1] = item;
            input.value = terms.join(", ") + ", ";
            suggestionBox.innerHTML = "";
          };
          suggestionBox.appendChild(div);
        });
      });
  
      document.addEventListener("click", (e) => {
        if (!suggestionBox.contains(e.target) && e.target !== input) {
          suggestionBox.innerHTML = "";
        }
      });
    }
  
    setupAutocomplete("languageInput", "languageSuggestions", languageOptions);
    setupAutocomplete("toolsInput", "toolsSuggestions", toolOptions);
  
    // Remove or disable the existing form submit event listener if it exists.
    // Instead, the Proceed button click will handle submission and loading of questions.
  
    // Variables for handling questions
    let currentQuestionIndex = 0;
    let questions = [];
  
    // Function to fetch Gemini questions from the server
    async function loadQuestions() {
      try {
        const response = await fetch('/skill-assessment/gemini-questions');
        const data = await response.json();
        questions = data.questions;
      } catch (error) {
        console.error("Error fetching questions:", error);
      }
    }
  
    // Load a question by index and update the DOM
    function loadNextQuestion(index) {
      currentQuestionIndex = index;  // keep track of the current question index
      if (questions && questions.length > 0) {
        const question = questions[index];
        document.getElementById("questionContent").innerHTML = `<strong>Q${index + 1}:</strong> ${question.question}`;
  
        const optionsContainer = document.getElementById("optionsContainer");
        optionsContainer.innerHTML = '';
        question.options.forEach((option, i) => {
          const optionHTML = `
            <div class="form-check">
              <input type="radio" class="form-check-input" name="answer" value="${option.option}" id="q${index}o${i}">
              <label class="form-check-label" for="q${index}o${i}">${option.option}</label>
            </div>
          `;
          optionsContainer.insertAdjacentHTML('beforeend', optionHTML);
        });
  
        // Update navigation buttons
        const navigationButtons = document.getElementById("navigationButtons");
        navigationButtons.innerHTML = `
          ${index > 0 ? '<button type="button" class="btn btn-secondary" onclick="loadNextQuestion(currentQuestionIndex - 1)">Previous</button>' : ''}
          ${index < questions.length - 1 ? `<button type="button" class="btn btn-primary" onclick="loadNextQuestion(currentQuestionIndex + 1)">Next</button>` : '<button type="submit" class="btn btn-success" id="submitBtn">Submit</button>'}
        `;
      }
    }
  
    // Event listener for the "Proceed" button click
    document.getElementById('proceedButton').addEventListener('click', async () => {
      // Gather data from the form fields:
      // Split comma-separated values and remove extra whitespace & empty values.
      const languages = document.getElementById("languageInput").value
                            .split(",")
                            .map(item => item.trim())
                            .filter(item => item);
      const tools = document.getElementById("toolsInput").value
                        .split(",")
                        .map(item => item.trim())
                        .filter(item => item);
  
      // For soft skills, convert the selected value into an array
      const softSkillValue = document.getElementById("softSkillsSelect").value;
      // Check if a valid skill is chosen (assuming the first option is a placeholder)
      const softSkills = (softSkillValue && softSkillValue !== "Select a soft skill...") ? [softSkillValue] : [];
  
      // Log the data for debugging purposes
      console.log("Languages: ", languages);
      console.log("Tools: ", tools);
      console.log("Soft Skills: ", softSkills);
  
      try {
        // Send data to the server (expects arrays of strings)
        const response = await fetch('/update-skill-assessment', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ languages, tools, softSkills })
        });
  
        // In our updated back end, if successful it may redirect...
        if (response.redirected) {
          window.location.href = response.url;
          return;
        }
  
        // Otherwise, process the JSON response
        const result = await response.json();
        if (result.success) {
          // Optionally notify the user; update the UI to show the questions section.
          alert("Profile updated successfully");
          // Show the Gemini questions section (make sure the element exists and is initially hidden)
          document.getElementById("questionsSection").style.display = "block";
          // Load questions and display the first question
          await loadQuestions();
          loadNextQuestion(0);
        } else {
          alert("Failed to update profile: " + result.message);
        }
      } catch (error) {
        console.error("Error updating profile:", error);
        alert("An error occurred while updating the profile");
      }
    });
  </script>
  
</body>
